function [H,G]=rateplot(D, figh, P)
% dataset/rateplot - plot spike rate plot of a dataset
%    rateplot(D) displays a rate plot of the spike times in dataset D.
%
%    rateplot(D,figh) uses figure handle figh for plotting
%    (default = [] -> gcf). 
%
%    rateplot(D, figh, P) uses parameters P for displaying the rateplot.
%    P is typically a dataviewparam object or a valid 2nd input argument to
%    the dataviewparam constructor method, such as a parameter filename.
%
%    rateplot is a standard "dataviewer", meaning that it may serve as
%    viewer for online data analysis during data collection. In addition,
%    the plot generated by all dataviewers allow an interactive change of
%    analysis parameter view the Params|Edit pullodwn menu (Ctr-Q).
%    For details on dataviewers, see dataviewparam.
%
%    See also dataviewparam, dataset/enableparamedit.

% recursive call using default plot params
if numel(D) > 1 
    clf;
    for ii=1:numel(D),
        rateplot(D(ii));
    end
    return;
end

%===========single D from here=============

% handle the special case of parameter queries. Do this immediately to 
% avoid endless recursion with dataviewparam.
if isvoid(D) && isequal('params', figh),
    [H,G] = local_ParamGUI;
    return;
end

% open a new figure or use existing one?
if nargin<2 || isempty(figh),
    open_new = isempty(get(0,'CurrentFigure'));
    figh=gcf; 
else,
    open_new = isSingleHandle(figh);
end

% parameters
if nargin<3, P = []; end
if isempty(P), % use default paremeter set for this dataviewer
    P = dataviewparam(mfilename); 
end

% delegate the real work to local fcn
H = local_rateplot(D, figh, open_new, P);

% enable parameter editing when viewing offline
if isSingleHandle(figh, 'figure'), enableparamedit(D, P, figh); end;


%============================================================
%============================================================
function data_struct = local_rateplot(D, figh, open_new, P);
% the real work for the rateplot

% prepare plot
if isSingleHandle(figh, 'figure')
    figure(figh); clf; ah = gca;
    if open_new, placefig(figh, mfilename, D.Stim.GUIname); end % restore previous size 
else
    ah = axes('parent', figh);
end

% Check varied stimulus Params
Pres = D.Stim.Presentation;
P = struct(P); P = P.Param;
isortPlot = P.iCond(P.iCond<=Pres.Ncond); % limit to actual Ncond
if isortPlot==0, isortPlot = 1:Pres.Ncond; end;
Ncond = numel(isortPlot);
AW = P.Anwin;

Chan = 1; % digital channel
Nrep = NrepRec(D);
SPT = spiketimes(D, Chan, 'no-unwarp');
BurstDur = GenericStimparams(D,'BurstDur');
for icond=1:Ncond, 
    if isequal('burstdur', AW)
        bdur = max(BurstDur(icond,:)); % burst dur in ms
        aw = [0 bdur]; 
    else
        aw = AW;
    end
    spt = AnWin(SPT(icond, :),aw);
    Nsp(icond) = numel([spt{:}]); 
    Rate(icond) = 1e3*Nsp(icond)./Nrep(icond)./bdur;
end; 

% axes(ah); % slow


X = D.Stim.Presentation.X;
useLog = 0;
if isequal('Octave', X.PlotScale) || isequal('Log', X.PlotScale), useLog = 1; end;

if has2varparams(D), % plot rate vs X; use Y as parameter
    Y = D.Stim.Presentation.Y;
    [Nx, Ny] = DealElements(D.Stim.Ncond_XY);
    for iy=1:Ny, % plot Rate against X for single Y value
        icond = (1:Nx)+Nx*(iy-1); % select conditions having current Y value
        x(iy,:) = X.PlotVal(icond);
        y(iy,:) = Rate(icond);
        
        [my, ind] = max(y(iy,:));
        max_y(iy) = my;
        max_x(iy) = x(iy,ind);
        
        LegStr{iy} = sprintf(Y.FormatString, Y.PlotVal(icond(1)));
    end
    
else,
    x = X.PlotVal(:);
    y = Rate(:);
    
    [my, ind] = max(y);
    max_y = my;
    max_x = x(ind);
end

if has2varparams(D),
    for iy=1:Ny, % plot Rate against X for single Y value
        set(gcf,'CurrentAxes',ah);
        xplot(x(iy,:), y(iy,:), lico(iy));
        if useLog
            xlog125;
        end
        legend(LegStr, 'location', 'southwest','fontsize',10);
    end
    max_info = '';
else,
    xplot(x, y);
    max_info = [X.ParName '-max: ' num2str(max_x) ' ' num2str(X.ParUnit) ' => SR = ' sprintf('%.1f',max_y) ' spikes/s'];
    if useLog
        xlog125;
    end
    try,
        LegStr = cellify(getGUIdata(gcf,'LegendStr', {}));
        LegStr = [LegStr [num2str(max(D.Stim.SPL)) ' dB SPL']];
%         setGUIdata(gcf,'LegendStr', LegStr);
        legend(LegStr, 'location', 'southwest');
    end % try/catch
   
end
data_struct.x = x;
data_struct.y = y;
data_struct.max_info = max_info;
%data_struct.LegStr = LegStr; deleted by hsin-wei 31/oct/2017, causing
%errors
data_struct.ylabel = 'rate (spikes/s)';
data_struct.xlabel = [lower(X.ParName) ' ('  X.ParUnit ')'];
data_struct.ylim = [0 inf];
xlabel([lower(X.ParName) ' ('  X.ParUnit ')'],'fontsize',10);
ylabel('rate (spikes/s)','fontsize',10);
% xlabel([lower(X.ParName) ' ('  X.ParUnit ')'],'fontsize',10);
% ylabel('rate (spikes/s)','fontsize',10);
ylim([0 inf]);

H = Rate;
if nargout<1, clear H; end; % suppress unwanted echoing
title([IDstring(D, 'full') ' ' max_info], 'fontsize', 12, 'fontweight', 'bold', 'interpreter', 'none');

function [T,G] = local_ParamGUI
% Returns the GUI for specifying the analysis parameters.
P = GUIpanel('rateplot','');
iCond = ParamQuery('iCond', 'iCond:', '0', '', 'integer',...
    'Condition indices for which to calculate the rate. 0 means: all conditions.', 20);
Anwin = ParamQuery('Anwin', 'analysis window:', 'burstdur', '', 'anwin',...
    'Analysis window (in ms) [t0 t1] re the stimulus onset. The string "burstdur" means [0 t], in which t is the burst duration of the stimulus.');
P = add(P, iCond);
P = add(P, Anwin, below(iCond));
P = marginalize(P,[4 4]);
G = GUIpiece([mfilename '_parameters'],[],[0 0],[10 10]);
G = add(G,P);
G = marginalize(G,[10 10]);
% list all parameters in a struct
T = VoidStruct('iCond/Anwin');

